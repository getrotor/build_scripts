The ROTOR Internal Server Load Balancer
--------------------------------------------------------------------------------

1. Introduction.

   Rotor is a server load balancer that is designed for "internal" use. The word
   "internal" has a very specific meaning here - it refers to an setup where
   both the "clients" and "servers" reside within your colo/datacenter. As an
   example, consider a set of servers (Set A) that host a ReSTful API which is
   consumed by another set of servers (Set B), where both sets reside inside of
   your colo/datacenter. Rotor can be used to load balance the requests that the
   API servers (Set A) receive from the consumers of the API (Set B).
   For an example of a situation where Rotor CANNOT be used, consider a setup
   where a set of servers (Set A) provide a service thats accessed by end
   users from around the world using their web browsers - we need an "external"
   facing server load balancer here, and Rotor is not one.

   Rotor consists of two components, a daemon called "rotor" and a libnss module
   called "libnss_rotor" that forwards hostname lookups rotor.

2. Installation.

   a. Prerequisites:
      Rotor comes with a makefile that automates the installation process. To
      use this facility GNU Make is needed.

   Installation is a two step process.

   b. Step #1: Install the daemon and the libnss module.
      The rotor package tarball has a makefile that automates this.
      Running "sudo make install" from the directory that has the Makefile
      (Note: Both the Makefile and this README are located in the same
      directory) will install rotor under /opt, and the libnss_rotor module under
      /lib.

   c. Step #2: Setup /etc/nsswitch.conf.
      The hosts entry in /etc/nsswitch.conf looks like the following by default.

      hosts:      files dns

      Edit this file and add "rotor" as a source. The best location for this
      would be between "files" and "dns". The edited file should have this for
      the hosts entry:

      hosts:      files rotor dns

   Once this is done, all hostname lookups will query the rotor daemon before
   querying DNS.

3. Running Rotor.

   a. Config File.
      Rotor uses /opt/rotor/etc/rotor.conf for its configuration data, this
      config file has two rotations setup by default - "test1.example.com" and
      "test2.example.com".
      Modify the file to reflect your infrastructure.

   b. Starting and stopping rotor.

      The preferred way to start the rotor daemon is to do the following:
      "sudo /opt/rotor/bin/rotor start"

      The preferred way to stop the rotor daemon is to do the following:
      "sudo /opt/rotor/bin/rotor stop"

   c. Checking if rotor is running.

      Running "sudo /opt/rotor/bin/rotor ping" should result in rotor responding
      with "pong".

      To find the PID of the rotor daemon, run "sudo /opt/rotor/bin/rotor pid"

      The classic method of running ps and grepping for the process (here called
      rotor) also works.

   d. Log files.
      Rotor logs to /var/log/rotor/

   e. Some application specific settings.
      If you use a JVM language like Java, Clojure or Scala, be aware that the
      JVM will cache the results of hostname lookups indefinitely - this is the
      default setting. You will need to disable this for your JVM application to
      work with rotor - set "networkaddress.cache.ttl=0" in the file
      "java.security" located at "%JRE%/lib/security"
      Refer to this doc for more info.
      http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/java-dg-jvm-ttl.html
      Remember, you will need to set the cache ttl to 0 for uniform load balancing!

4. Basic Tests.

   Once Rotor is setup and the rotor daemon is running, you can test your
   rotations by using getent. For example, if you have setup a rotation called
   "test1.example.com" with reals "10.0.2.127", "10.0.2.126", and "10.0.2.125",
   running "getent hosts test1.example.com" multiple times will return the IPs
   of the healthy reals in a round robin fashion.

   You can also test by running "curl http://test1.example.com/" multiple times,
   each response will be from a healthy real picked using the round robin
   algorithm.

5. Uninstalling Rotor.
   Run "make uninstall" from the top level directory in the package tarball, and
   revert your changes to /etc/nsswitch.conf


6. Limitations and Bugs.
   a. Only http is currently supported.
   b. Round Robin is the only algorithm thats currently implemented.
   c. If rotor is enabled in /etc/nsswitch.conf and the rotor daemon is NOT
   running, all hostname lookups will take one second more than the usual.
   d. No runtime metrics are generated by rotor.
   e. The rotor daemon runs with root privileges.
   f. No IPv6 support.
